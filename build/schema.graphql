# Enables Full-Text Search capabilities for the Token entity
type _Schema_
  @fulltext(
    name: "tokenSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Token"
        fields: [{ name: "name" }, { name: "symbol" }, { name: "id" }]
      }
    ]
  )

# Represents a single token created via the main contract
type Token @entity {
  "The token's contract address"
  id: ID!
  "The developer who created the token"
  creator: Bytes!
  "The associated bonding curve contract address"
  bondingCurve: Bytes!
  "The token's name (e.g., 'My Token')"
  name: String!
  "The token's symbol (e.g., 'TKN')"
  symbol: String!
  "Set to true when the Bonded event is emitted"
  bonded: Boolean!
  "Link to all user-specific data for this token"
  userTokenData: [UserToken!] @derivedFrom(field: "token")
  "Link to all holders of this token"
  holders: [TokenHolder!] @derivedFrom(field: "token")
}

# Represents a user who has interacted with any token
type User @entity {
  "The user's wallet address"
  id: ID!
  "Link to all token-specific data for this user"
  userTokenData: [UserToken!] @derivedFrom(field: "user")
  "Link to all tokens held by this user"
  tokenBalances: [TokenHolder!] @derivedFrom(field: "user")
}

# Joins a User and a Token to track P&L and other interaction data
type UserToken @entity {
  "Composite ID: {user.id}-{token.id}"
  id: ID!
  "Link to the User"
  user: User!
  "Link to the Token"
  token: Token!
  "Total ETH spent buying this token"
  totalETHBought: BigDecimal!
  "Total ETH received from selling this token"
  totalETHSold: BigDecimal!
  "Total amount of this token purchased"
  totalTokensBought: BigDecimal!
  "Total amount of this token sold"
  totalTokensSold: BigDecimal!
}

# (Lower Priority) Tracks a user's balance for a specific token
type TokenHolder @entity {
  "Composite ID: {token.id}-{user.id}"
  id: ID!
  "Link to the Token"
  token: Token!
  "Link to the User"
  user: User!
  "The user's current balance of this token"
  balance: BigDecimal!
}