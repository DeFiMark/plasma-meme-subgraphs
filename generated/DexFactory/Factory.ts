// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quantityETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantityTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PairCreated extends ethereum.Event {
  get params(): PairCreated__Params {
    return new PairCreated__Params(this);
  }
}

export class PairCreated__Params {
  _event: PairCreated;

  constructor(event: PairCreated) {
    this._event = event;
  }

  get token0(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token1(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pair(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get param3(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quantityETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantityTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  INIT_CODE_PAIR_HASH(): Bytes {
    let result = super.call(
      "INIT_CODE_PAIR_HASH",
      "INIT_CODE_PAIR_HASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_INIT_CODE_PAIR_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "INIT_CODE_PAIR_HASH",
      "INIT_CODE_PAIR_HASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPairs(param0: BigInt): Address {
    let result = super.call("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_allPairs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allPairs", "allPairs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPairsLength(): BigInt {
    let result = super.call("allPairsLength", "allPairsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allPairsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allPairsLength",
      "allPairsLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canCreatePair(addr: Address): boolean {
    let result = super.call("canCreatePair", "canCreatePair(address):(bool)", [
      ethereum.Value.fromAddress(addr),
    ]);

    return result[0].toBoolean();
  }

  try_canCreatePair(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canCreatePair",
      "canCreatePair(address):(bool)",
      [ethereum.Value.fromAddress(addr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createPair(tokenA: Address, tokenB: Address): Address {
    let result = super.call(
      "createPair",
      "createPair(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)],
    );

    return result[0].toAddress();
  }

  try_createPair(
    tokenA: Address,
    tokenB: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createPair",
      "createPair(address,address):(address)",
      [ethereum.Value.fromAddress(tokenA), ethereum.Value.fromAddress(tokenB)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  database(): Address {
    let result = super.call("database", "database():(address)", []);

    return result[0].toAddress();
  }

  try_database(): ethereum.CallResult<Address> {
    let result = super.tryCall("database", "database():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPair(param0: Address, param1: Address): Address {
    let result = super.call("getPair", "getPair(address,address):(address)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1),
    ]);

    return result[0].toAddress();
  }

  try_getPair(param0: Address, param1: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPair",
      "getPair(address,address):(address)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSwapFee(): BigInt {
    let result = super.call("getSwapFee", "getSwapFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getSwapFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getSwapFee", "getSwapFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isPair(param0: Address): boolean {
    let result = super.call("isPair", "isPair(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isPair(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPair", "isPair(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paginatePairs(start: BigInt, end: BigInt): Array<Address> {
    let result = super.call(
      "paginatePairs",
      "paginatePairs(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
      ],
    );

    return result[0].toAddressArray();
  }

  try_paginatePairs(
    start: BigInt,
    end: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "paginatePairs",
      "paginatePairs(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _database(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePairCall extends ethereum.Call {
  get inputs(): CreatePairCall__Inputs {
    return new CreatePairCall__Inputs(this);
  }

  get outputs(): CreatePairCall__Outputs {
    return new CreatePairCall__Outputs(this);
  }
}

export class CreatePairCall__Inputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenB(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CreatePairCall__Outputs {
  _call: CreatePairCall;

  constructor(call: CreatePairCall) {
    this._call = call;
  }

  get pair(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetCanCreatePairCall extends ethereum.Call {
  get inputs(): SetCanCreatePairCall__Inputs {
    return new SetCanCreatePairCall__Inputs(this);
  }

  get outputs(): SetCanCreatePairCall__Outputs {
    return new SetCanCreatePairCall__Outputs(this);
  }
}

export class SetCanCreatePairCall__Inputs {
  _call: SetCanCreatePairCall;

  constructor(call: SetCanCreatePairCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _canCreatePair_(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetCanCreatePairCall__Outputs {
  _call: SetCanCreatePairCall;

  constructor(call: SetCanCreatePairCall) {
    this._call = call;
  }
}

export class SetSwapFeeCall extends ethereum.Call {
  get inputs(): SetSwapFeeCall__Inputs {
    return new SetSwapFeeCall__Inputs(this);
  }

  get outputs(): SetSwapFeeCall__Outputs {
    return new SetSwapFeeCall__Outputs(this);
  }
}

export class SetSwapFeeCall__Inputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }

  get _swapFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSwapFeeCall__Outputs {
  _call: SetSwapFeeCall;

  constructor(call: SetSwapFeeCall) {
    this._call = call;
  }
}

export class SwapEventCall extends ethereum.Call {
  get inputs(): SwapEventCall__Inputs {
    return new SwapEventCall__Inputs(this);
  }

  get outputs(): SwapEventCall__Outputs {
    return new SwapEventCall__Outputs(this);
  }
}

export class SwapEventCall__Inputs {
  _call: SwapEventCall;

  constructor(call: SwapEventCall) {
    this._call = call;
  }

  get token0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get user(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount0In(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get amount1In(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get amount0Out(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get amount1Out(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class SwapEventCall__Outputs {
  _call: SwapEventCall;

  constructor(call: SwapEventCall) {
    this._call = call;
  }
}
