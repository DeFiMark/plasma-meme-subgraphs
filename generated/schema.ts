// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Token | null {
    return changetype<Token | null>(store.get_in_block("Token", id));
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get bondingCurve(): Bytes | null {
    let value = this.get("bondingCurve");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bondingCurve(value: Bytes | null) {
    if (!value) {
      this.unset("bondingCurve");
    } else {
      this.set("bondingCurve", Value.fromBytes(<Bytes>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get bondedAt(): BigInt | null {
    let value = this.get("bondedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bondedAt(value: BigInt | null) {
    if (!value) {
      this.unset("bondedAt");
    } else {
      this.set("bondedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get pair(): Bytes | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set pair(value: Bytes | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromBytes(<Bytes>value));
    }
  }

  get totalSupply(): BigInt | null {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt | null) {
    if (!value) {
      this.unset("totalSupply");
    } else {
      this.set("totalSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get latestPriceEth(): BigDecimal | null {
    let value = this.get("latestPriceEth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set latestPriceEth(value: BigDecimal | null) {
    if (!value) {
      this.unset("latestPriceEth");
    } else {
      this.set("latestPriceEth", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get volume24hEth(): BigDecimal | null {
    let value = this.get("volume24hEth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set volume24hEth(value: BigDecimal | null) {
    if (!value) {
      this.unset("volume24hEth");
    } else {
      this.set("volume24hEth", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get volume24hToken(): BigDecimal | null {
    let value = this.get("volume24hToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set volume24hToken(value: BigDecimal | null) {
    if (!value) {
      this.unset("volume24hToken");
    } else {
      this.set("volume24hToken", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get price24hAgoEth(): BigDecimal | null {
    let value = this.get("price24hAgoEth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set price24hAgoEth(value: BigDecimal | null) {
    if (!value) {
      this.unset("price24hAgoEth");
    } else {
      this.set("price24hAgoEth", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class UserTokenPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserTokenPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserTokenPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserTokenPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserTokenPosition | null {
    return changetype<UserTokenPosition | null>(
      store.get_in_block("UserTokenPosition", id),
    );
  }

  static load(id: string): UserTokenPosition | null {
    return changetype<UserTokenPosition | null>(
      store.get("UserTokenPosition", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get avgCostEthPerToken(): BigDecimal {
    let value = this.get("avgCostEthPerToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set avgCostEthPerToken(value: BigDecimal) {
    this.set("avgCostEthPerToken", Value.fromBigDecimal(value));
  }

  get totalEthBought(): BigDecimal {
    let value = this.get("totalEthBought");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalEthBought(value: BigDecimal) {
    this.set("totalEthBought", Value.fromBigDecimal(value));
  }

  get totalTokensBought(): BigDecimal {
    let value = this.get("totalTokensBought");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTokensBought(value: BigDecimal) {
    this.set("totalTokensBought", Value.fromBigDecimal(value));
  }

  get totalEthSold(): BigDecimal {
    let value = this.get("totalEthSold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalEthSold(value: BigDecimal) {
    this.set("totalEthSold", Value.fromBigDecimal(value));
  }

  get totalTokensSold(): BigDecimal {
    let value = this.get("totalTokensSold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalTokensSold(value: BigDecimal) {
    this.set("totalTokensSold", Value.fromBigDecimal(value));
  }

  get realizedPnLEth(): BigDecimal {
    let value = this.get("realizedPnLEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set realizedPnLEth(value: BigDecimal) {
    this.set("realizedPnLEth", Value.fromBigDecimal(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class Trade extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Trade entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Trade must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Trade", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Trade | null {
    return changetype<Trade | null>(store.get_in_block("Trade", id));
  }

  static load(id: string): Trade | null {
    return changetype<Trade | null>(store.get("Trade", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get side(): string {
    let value = this.get("side");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set side(value: string) {
    this.set("side", Value.fromString(value));
  }

  get quantityETH(): BigDecimal {
    let value = this.get("quantityETH");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set quantityETH(value: BigDecimal) {
    this.set("quantityETH", Value.fromBigDecimal(value));
  }

  get quantityTokens(): BigDecimal {
    let value = this.get("quantityTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set quantityTokens(value: BigDecimal) {
    this.set("quantityTokens", Value.fromBigDecimal(value));
  }

  get source(): string {
    let value = this.get("source");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }
}

export class TokenDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TokenDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenDayData | null {
    return changetype<TokenDayData | null>(
      store.get_in_block("TokenDayData", id),
    );
  }

  static load(id: string): TokenDayData | null {
    return changetype<TokenDayData | null>(store.get("TokenDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get date(): i32 {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get volumeEth(): BigDecimal {
    let value = this.get("volumeEth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volumeEth(value: BigDecimal) {
    this.set("volumeEth", Value.fromBigDecimal(value));
  }

  get volumeToken(): BigDecimal {
    let value = this.get("volumeToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set volumeToken(value: BigDecimal) {
    this.set("volumeToken", Value.fromBigDecimal(value));
  }

  get closePriceEth(): BigDecimal | null {
    let value = this.get("closePriceEth");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set closePriceEth(value: BigDecimal | null) {
    if (!value) {
      this.unset("closePriceEth");
    } else {
      this.set("closePriceEth", Value.fromBigDecimal(<BigDecimal>value));
    }
  }
}
