// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Buy extends ethereum.Event {
  get params(): Buy__Params {
    return new Buy__Params(this);
  }
}

export class Buy__Params {
  _event: Buy;

  constructor(event: Buy) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quantityETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantityTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Sell extends ethereum.Event {
  get params(): Sell__Params {
    return new Sell__Params(this);
  }
}

export class Sell__Params {
  _event: Sell;

  constructor(event: Sell) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quantityETH(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get quantityTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BondingCurve__batchTradesResultValue0Struct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get ethAmount(): BigInt {
    return this[1].toBigInt();
  }

  get tokenAmount(): BigInt {
    return this[2].toBigInt();
  }

  get currentSupply(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }
}

export class BondingCurve__getEvenlySplitPriceChangesResultValue0Struct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get ethAmount(): BigInt {
    return this[1].toBigInt();
  }

  get tokenAmount(): BigInt {
    return this[2].toBigInt();
  }

  get currentSupply(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }
}

export class BondingCurve__getListOfTradesResultValue0Struct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get ethAmount(): BigInt {
    return this[1].toBigInt();
  }

  get tokenAmount(): BigInt {
    return this[2].toBigInt();
  }

  get currentSupply(): BigInt {
    return this[3].toBigInt();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }
}

export class BondingCurve__paginateHoldersAndBalancesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class BondingCurve__tradesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getMaker(): Address {
    return this.value0;
  }

  getEthAmount(): BigInt {
    return this.value1;
  }

  getTokenAmount(): BigInt {
    return this.value2;
  }

  getCurrentSupply(): BigInt {
    return this.value3;
  }

  getTimestamp(): BigInt {
    return this.value4;
  }
}

export class BondingCurve__viewAllHoldersAndBalancesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class BondingCurve extends ethereum.SmartContract {
  static bind(address: Address): BondingCurve {
    return new BondingCurve("BondingCurve", address);
  }

  A_SCALED(): BigInt {
    let result = super.call("A_SCALED", "A_SCALED():(uint256)", []);

    return result[0].toBigInt();
  }

  try_A_SCALED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("A_SCALED", "A_SCALED():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  BONDING_TARGET(): BigInt {
    let result = super.call("BONDING_TARGET", "BONDING_TARGET():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BONDING_TARGET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BONDING_TARGET",
      "BONDING_TARGET():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  B_SCALED(): BigInt {
    let result = super.call("B_SCALED", "B_SCALED():(uint256)", []);

    return result[0].toBigInt();
  }

  try_B_SCALED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("B_SCALED", "B_SCALED():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  TOKEN_TOTAL(): BigInt {
    let result = super.call("TOKEN_TOTAL", "TOKEN_TOTAL():(uint256)", []);

    return result[0].toBigInt();
  }

  try_TOKEN_TOTAL(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("TOKEN_TOTAL", "TOKEN_TOTAL():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowEarlyTransfer(account: Address): boolean {
    let result = super.call(
      "allowEarlyTransfer",
      "allowEarlyTransfer(address):(bool)",
      [ethereum.Value.fromAddress(account)],
    );

    return result[0].toBoolean();
  }

  try_allowEarlyTransfer(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowEarlyTransfer",
      "allowEarlyTransfer(address):(bool)",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(user: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(user),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchTrades(
    startIndex: BigInt,
    endIndex: BigInt,
  ): Array<BondingCurve__batchTradesResultValue0Struct> {
    let result = super.call(
      "batchTrades",
      "batchTrades(uint256,uint256):((address,int256,int256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );

    return result[0].toTupleArray<BondingCurve__batchTradesResultValue0Struct>();
  }

  try_batchTrades(
    startIndex: BigInt,
    endIndex: BigInt,
  ): ethereum.CallResult<Array<BondingCurve__batchTradesResultValue0Struct>> {
    let result = super.tryCall(
      "batchTrades",
      "batchTrades(uint256,uint256):((address,int256,int256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BondingCurve__batchTradesResultValue0Struct>(),
    );
  }

  bondingSupply(): BigInt {
    let result = super.call("bondingSupply", "bondingSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bondingSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "bondingSupply",
      "bondingSupply():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  costForward(_S: BigInt, _deltaS: BigInt): BigInt {
    let result = super.call(
      "costForward",
      "costForward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_S),
        ethereum.Value.fromUnsignedBigInt(_deltaS),
      ],
    );

    return result[0].toBigInt();
  }

  try_costForward(_S: BigInt, _deltaS: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "costForward",
      "costForward(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_S),
        ethereum.Value.fromUnsignedBigInt(_deltaS),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEvenlySplitPriceChanges(
    numDataPoints: BigInt,
  ): Array<BondingCurve__getEvenlySplitPriceChangesResultValue0Struct> {
    let result = super.call(
      "getEvenlySplitPriceChanges",
      "getEvenlySplitPriceChanges(uint256):((address,int256,int256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(numDataPoints)],
    );

    return result[0].toTupleArray<BondingCurve__getEvenlySplitPriceChangesResultValue0Struct>();
  }

  try_getEvenlySplitPriceChanges(
    numDataPoints: BigInt,
  ): ethereum.CallResult<
    Array<BondingCurve__getEvenlySplitPriceChangesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getEvenlySplitPriceChanges",
      "getEvenlySplitPriceChanges(uint256):((address,int256,int256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigInt(numDataPoints)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BondingCurve__getEvenlySplitPriceChangesResultValue0Struct>(),
    );
  }

  getHolders(): Array<Address> {
    let result = super.call("getHolders", "getHolders():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getHolders(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getHolders", "getHolders():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getListOfTrades(
    indexes: Array<BigInt>,
  ): Array<BondingCurve__getListOfTradesResultValue0Struct> {
    let result = super.call(
      "getListOfTrades",
      "getListOfTrades(uint256[]):((address,int256,int256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(indexes)],
    );

    return result[0].toTupleArray<BondingCurve__getListOfTradesResultValue0Struct>();
  }

  try_getListOfTrades(
    indexes: Array<BigInt>,
  ): ethereum.CallResult<
    Array<BondingCurve__getListOfTradesResultValue0Struct>
  > {
    let result = super.tryCall(
      "getListOfTrades",
      "getListOfTrades(uint256[]):((address,int256,int256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(indexes)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<BondingCurve__getListOfTradesResultValue0Struct>(),
    );
  }

  getNumHolders(): BigInt {
    let result = super.call("getNumHolders", "getNumHolders():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNumHolders(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumHolders",
      "getNumHolders():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getToken(): Address {
    let result = super.call("getToken", "getToken():(address)", []);

    return result[0].toAddress();
  }

  try_getToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getToken", "getToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVersionNo(): BigInt {
    let result = super.call("getVersionNo", "getVersionNo():(uint32)", []);

    return result[0].toBigInt();
  }

  try_getVersionNo(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVersionNo", "getVersionNo():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isBonded(): boolean {
    let result = super.call("isBonded", "isBonded():(bool)", []);

    return result[0].toBoolean();
  }

  try_isBonded(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBonded", "isBonded():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSupplyPerWallet(): BigInt {
    let result = super.call(
      "maxSupplyPerWallet",
      "maxSupplyPerWallet():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxSupplyPerWallet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSupplyPerWallet",
      "maxSupplyPerWallet():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paginateHolders(startIndex: BigInt, endIndex: BigInt): Array<Address> {
    let result = super.call(
      "paginateHolders",
      "paginateHolders(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );

    return result[0].toAddressArray();
  }

  try_paginateHolders(
    startIndex: BigInt,
    endIndex: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "paginateHolders",
      "paginateHolders(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  paginateHoldersAndBalances(
    startIndex: BigInt,
    endIndex: BigInt,
  ): BondingCurve__paginateHoldersAndBalancesResult {
    let result = super.call(
      "paginateHoldersAndBalances",
      "paginateHoldersAndBalances(uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );

    return new BondingCurve__paginateHoldersAndBalancesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
    );
  }

  try_paginateHoldersAndBalances(
    startIndex: BigInt,
    endIndex: BigInt,
  ): ethereum.CallResult<BondingCurve__paginateHoldersAndBalancesResult> {
    let result = super.tryCall(
      "paginateHoldersAndBalances",
      "paginateHoldersAndBalances(uint256,uint256):(address[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BondingCurve__paginateHoldersAndBalancesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
      ),
    );
  }

  previewBuy(ethAmountWei: BigInt): BigInt {
    let result = super.call("previewBuy", "previewBuy(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(ethAmountWei),
    ]);

    return result[0].toBigInt();
  }

  try_previewBuy(ethAmountWei: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("previewBuy", "previewBuy(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(ethAmountWei),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previewSell(tokenAmount: BigInt): BigInt {
    let result = super.call("previewSell", "previewSell(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenAmount),
    ]);

    return result[0].toBigInt();
  }

  try_previewSell(tokenAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previewSell",
      "previewSell(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenAmount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sellTokens(tokenAmount: BigInt): BigInt {
    let result = super.call("sellTokens", "sellTokens(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenAmount),
    ]);

    return result[0].toBigInt();
  }

  try_sellTokens(tokenAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sellTokens", "sellTokens(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tokenAmount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  solveIntegralBuy(_currentSupply: BigInt, _costInScaled: BigInt): BigInt {
    let result = super.call(
      "solveIntegralBuy",
      "solveIntegralBuy(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_currentSupply),
        ethereum.Value.fromUnsignedBigInt(_costInScaled),
      ],
    );

    return result[0].toBigInt();
  }

  try_solveIntegralBuy(
    _currentSupply: BigInt,
    _costInScaled: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "solveIntegralBuy",
      "solveIntegralBuy(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_currentSupply),
        ethereum.Value.fromUnsignedBigInt(_costInScaled),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  solveIntegralSell(_currentSupply: BigInt, _tokenAmount: BigInt): BigInt {
    let result = super.call(
      "solveIntegralSell",
      "solveIntegralSell(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_currentSupply),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount),
      ],
    );

    return result[0].toBigInt();
  }

  try_solveIntegralSell(
    _currentSupply: BigInt,
    _tokenAmount: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "solveIntegralSell",
      "solveIntegralSell(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_currentSupply),
        ethereum.Value.fromUnsignedBigInt(_tokenAmount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVolume(): BigInt {
    let result = super.call("totalVolume", "totalVolume():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalVolume(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalVolume", "totalVolume():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tradeFee(): i32 {
    let result = super.call("tradeFee", "tradeFee():(uint8)", []);

    return result[0].toI32();
  }

  try_tradeFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("tradeFee", "tradeFee():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tradeNonce(): BigInt {
    let result = super.call("tradeNonce", "tradeNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tradeNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tradeNonce", "tradeNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trades(param0: BigInt): BondingCurve__tradesResult {
    let result = super.call(
      "trades",
      "trades(uint256):(address,int256,int256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new BondingCurve__tradesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_trades(param0: BigInt): ethereum.CallResult<BondingCurve__tradesResult> {
    let result = super.tryCall(
      "trades",
      "trades(uint256):(address,int256,int256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BondingCurve__tradesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  viewAllHoldersAndBalances(): BondingCurve__viewAllHoldersAndBalancesResult {
    let result = super.call(
      "viewAllHoldersAndBalances",
      "viewAllHoldersAndBalances():(address[],uint256[])",
      [],
    );

    return new BondingCurve__viewAllHoldersAndBalancesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
    );
  }

  try_viewAllHoldersAndBalances(): ethereum.CallResult<BondingCurve__viewAllHoldersAndBalancesResult> {
    let result = super.tryCall(
      "viewAllHoldersAndBalances",
      "viewAllHoldersAndBalances():(address[],uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BondingCurve__viewAllHoldersAndBalancesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
      ),
    );
  }
}

export class __init__Call extends ethereum.Call {
  get inputs(): __init__Call__Inputs {
    return new __init__Call__Inputs(this);
  }

  get outputs(): __init__Call__Outputs {
    return new __init__Call__Outputs(this);
  }
}

export class __init__Call__Inputs {
  _call: __init__Call;

  constructor(call: __init__Call) {
    this._call = call;
  }

  get payload(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get token_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidityAdder_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class __init__Call__Outputs {
  _call: __init__Call;

  constructor(call: __init__Call) {
    this._call = call;
  }
}

export class BuyTokensCall extends ethereum.Call {
  get inputs(): BuyTokensCall__Inputs {
    return new BuyTokensCall__Inputs(this);
  }

  get outputs(): BuyTokensCall__Outputs {
    return new BuyTokensCall__Outputs(this);
  }
}

export class BuyTokensCall__Inputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minOut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyTokensCall__Outputs {
  _call: BuyTokensCall;

  constructor(call: BuyTokensCall) {
    this._call = call;
  }

  get tokensBought(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SellTokensCall extends ethereum.Call {
  get inputs(): SellTokensCall__Inputs {
    return new SellTokensCall__Inputs(this);
  }

  get outputs(): SellTokensCall__Outputs {
    return new SellTokensCall__Outputs(this);
  }
}

export class SellTokensCall__Inputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SellTokensCall__Outputs {
  _call: SellTokensCall;

  constructor(call: SellTokensCall) {
    this._call = call;
  }

  get ethOutWei(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
