// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Bonded extends ethereum.Event {
  get params(): Bonded__Params {
    return new Bonded__Params(this);
  }
}

export class Bonded__Params {
  _event: Bonded;

  constructor(event: Bonded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewTokenCreated extends ethereum.Event {
  get params(): NewTokenCreated__Params {
    return new NewTokenCreated__Params(this);
  }
}

export class NewTokenCreated__Params {
  _event: NewTokenCreated;

  constructor(event: NewTokenCreated) {
    this._event = event;
  }

  get dev(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get bondingCurve(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class OwnerSet extends ethereum.Event {
  get params(): OwnerSet__Params {
    return new OwnerSet__Params(this);
  }
}

export class OwnerSet__Params {
  _event: OwnerSet;

  constructor(event: OwnerSet) {
    this._event = event;
  }

  get oldOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Database__batchGetProjectAvancedInfoResult {
  value0: Array<Address>;
  value1: Array<Address>;
  value2: Array<Array<string>>;
  value3: Array<Address>;
  value4: Array<string>;
  value5: Array<string>;
  value6: Array<BigInt>;
  value7: Array<boolean>;

  constructor(
    value0: Array<Address>,
    value1: Array<Address>,
    value2: Array<Array<string>>,
    value3: Array<Address>,
    value4: Array<string>,
    value5: Array<string>,
    value6: Array<BigInt>,
    value7: Array<boolean>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromStringMatrix(this.value2));
    map.set("value3", ethereum.Value.fromAddressArray(this.value3));
    map.set("value4", ethereum.Value.fromStringArray(this.value4));
    map.set("value5", ethereum.Value.fromStringArray(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    map.set("value7", ethereum.Value.fromBooleanArray(this.value7));
    return map;
  }

  getAssets(): Array<Address> {
    return this.value0;
  }

  getBondingCurves(): Array<Address> {
    return this.value1;
  }

  getMetadata(): Array<Array<string>> {
    return this.value2;
  }

  getDevs(): Array<Address> {
    return this.value3;
  }

  getNames(): Array<string> {
    return this.value4;
  }

  getSymbols(): Array<string> {
    return this.value5;
  }

  getLaunchTimes(): Array<BigInt> {
    return this.value6;
  }

  getIsBonded_(): Array<boolean> {
    return this.value7;
  }
}

export class Database__batchGetProjectInfoResult {
  value0: Array<Address>;
  value1: Array<Address>;
  value2: Array<Array<string>>;
  value3: Array<Address>;

  constructor(
    value0: Array<Address>,
    value1: Array<Address>,
    value2: Array<Array<string>>,
    value3: Array<Address>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromStringMatrix(this.value2));
    map.set("value3", ethereum.Value.fromAddressArray(this.value3));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }

  getValue2(): Array<Array<string>> {
    return this.value2;
  }

  getValue3(): Array<Address> {
    return this.value3;
  }
}

export class Database__batchGetProjectInfoByTokensResult {
  value0: Array<Address>;
  value1: Array<Address>;
  value2: Array<Array<string>>;
  value3: Array<Address>;

  constructor(
    value0: Array<Address>,
    value1: Array<Address>,
    value2: Array<Array<string>>,
    value3: Array<Address>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromStringMatrix(this.value2));
    map.set("value3", ethereum.Value.fromAddressArray(this.value3));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }

  getValue2(): Array<Array<string>> {
    return this.value2;
  }

  getValue3(): Array<Address> {
    return this.value3;
  }
}

export class Database__devFeesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getClaimedDevFees(): BigInt {
    return this.value0;
  }

  getPendingDevFees(): BigInt {
    return this.value1;
  }
}

export class Database__getProjectInfoByTokenResult {
  value0: Address;
  value1: Address;
  value2: Array<string>;
  value3: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Array<string>,
    value3: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromStringArray(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): Array<string> {
    return this.value2;
  }

  getValue3(): Address {
    return this.value3;
  }
}

export class Database__paginatePrebondedProjectsResult {
  value0: Array<Address>;
  value1: Array<Address>;
  value2: Array<Array<string>>;
  value3: Array<Address>;

  constructor(
    value0: Array<Address>,
    value1: Array<Address>,
    value2: Array<Array<string>>,
    value3: Array<Address>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromAddressArray(this.value1));
    map.set("value2", ethereum.Value.fromStringMatrix(this.value2));
    map.set("value3", ethereum.Value.fromAddressArray(this.value3));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<Address> {
    return this.value1;
  }

  getValue2(): Array<Array<string>> {
    return this.value2;
  }

  getValue3(): Array<Address> {
    return this.value3;
  }
}

export class Database__projectsResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: string;
  value4: Address;
  value5: Address;
  value6: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: string,
    value3: string,
    value4: Address,
    value5: Address,
    value6: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getAsset(): Address {
    return this.value0;
  }

  getBondingCurve(): Address {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getSymbol(): string {
    return this.value3;
  }

  getDev(): Address {
    return this.value4;
  }

  getCreatorAddress(): Address {
    return this.value5;
  }

  getLaunchTime(): BigInt {
    return this.value6;
  }
}

export class Database extends ethereum.SmartContract {
  static bind(address: Address): Database {
    return new Database("Database", address);
  }

  HigherVolumeTracker(): Address {
    let result = super.call(
      "HigherVolumeTracker",
      "HigherVolumeTracker():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_HigherVolumeTracker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "HigherVolumeTracker",
      "HigherVolumeTracker():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allDevProjects(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "allDevProjects",
      "allDevProjects(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_allDevProjects(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allDevProjects",
      "allDevProjects(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assetToProject(param0: Address): BigInt {
    let result = super.call(
      "assetToProject",
      "assetToProject(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_assetToProject(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "assetToProject",
      "assetToProject(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  batchGetProjectAvancedInfo(
    projectIDs: Array<BigInt>,
  ): Database__batchGetProjectAvancedInfoResult {
    let result = super.call(
      "batchGetProjectAvancedInfo",
      "batchGetProjectAvancedInfo(uint256[]):(address[],address[],string[][],address[],string[],string[],uint256[],bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(projectIDs)],
    );

    return new Database__batchGetProjectAvancedInfoResult(
      result[0].toAddressArray(),
      result[1].toAddressArray(),
      result[2].toStringMatrix(),
      result[3].toAddressArray(),
      result[4].toStringArray(),
      result[5].toStringArray(),
      result[6].toBigIntArray(),
      result[7].toBooleanArray(),
    );
  }

  try_batchGetProjectAvancedInfo(
    projectIDs: Array<BigInt>,
  ): ethereum.CallResult<Database__batchGetProjectAvancedInfoResult> {
    let result = super.tryCall(
      "batchGetProjectAvancedInfo",
      "batchGetProjectAvancedInfo(uint256[]):(address[],address[],string[][],address[],string[],string[],uint256[],bool[])",
      [ethereum.Value.fromUnsignedBigIntArray(projectIDs)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Database__batchGetProjectAvancedInfoResult(
        value[0].toAddressArray(),
        value[1].toAddressArray(),
        value[2].toStringMatrix(),
        value[3].toAddressArray(),
        value[4].toStringArray(),
        value[5].toStringArray(),
        value[6].toBigIntArray(),
        value[7].toBooleanArray(),
      ),
    );
  }

  batchGetProjectInfo(
    projectIDs: Array<BigInt>,
  ): Database__batchGetProjectInfoResult {
    let result = super.call(
      "batchGetProjectInfo",
      "batchGetProjectInfo(uint256[]):(address[],address[],string[][],address[])",
      [ethereum.Value.fromUnsignedBigIntArray(projectIDs)],
    );

    return new Database__batchGetProjectInfoResult(
      result[0].toAddressArray(),
      result[1].toAddressArray(),
      result[2].toStringMatrix(),
      result[3].toAddressArray(),
    );
  }

  try_batchGetProjectInfo(
    projectIDs: Array<BigInt>,
  ): ethereum.CallResult<Database__batchGetProjectInfoResult> {
    let result = super.tryCall(
      "batchGetProjectInfo",
      "batchGetProjectInfo(uint256[]):(address[],address[],string[][],address[])",
      [ethereum.Value.fromUnsignedBigIntArray(projectIDs)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Database__batchGetProjectInfoResult(
        value[0].toAddressArray(),
        value[1].toAddressArray(),
        value[2].toStringMatrix(),
        value[3].toAddressArray(),
      ),
    );
  }

  batchGetProjectInfoByTokens(
    tokens: Array<Address>,
  ): Database__batchGetProjectInfoByTokensResult {
    let result = super.call(
      "batchGetProjectInfoByTokens",
      "batchGetProjectInfoByTokens(address[]):(address[],address[],string[][],address[])",
      [ethereum.Value.fromAddressArray(tokens)],
    );

    return new Database__batchGetProjectInfoByTokensResult(
      result[0].toAddressArray(),
      result[1].toAddressArray(),
      result[2].toStringMatrix(),
      result[3].toAddressArray(),
    );
  }

  try_batchGetProjectInfoByTokens(
    tokens: Array<Address>,
  ): ethereum.CallResult<Database__batchGetProjectInfoByTokensResult> {
    let result = super.tryCall(
      "batchGetProjectInfoByTokens",
      "batchGetProjectInfoByTokens(address[]):(address[],address[],string[][],address[])",
      [ethereum.Value.fromAddressArray(tokens)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Database__batchGetProjectInfoByTokensResult(
        value[0].toAddressArray(),
        value[1].toAddressArray(),
        value[2].toStringMatrix(),
        value[3].toAddressArray(),
      ),
    );
  }

  bondingCurveToToken(param0: Address): Address {
    let result = super.call(
      "bondingCurveToToken",
      "bondingCurveToToken(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toAddress();
  }

  try_bondingCurveToToken(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "bondingCurveToToken",
      "bondingCurveToToken(address):(address)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canRegisterVolume(param0: Address): boolean {
    let result = super.call(
      "canRegisterVolume",
      "canRegisterVolume(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_canRegisterVolume(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canRegisterVolume",
      "canRegisterVolume(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  devFees(param0: Address): Database__devFeesResult {
    let result = super.call("devFees", "devFees(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return new Database__devFeesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_devFees(param0: Address): ethereum.CallResult<Database__devFeesResult> {
    let result = super.tryCall(
      "devFees",
      "devFees(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Database__devFeesResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  getAllDevProjects(dev: Address): Array<BigInt> {
    let result = super.call(
      "getAllDevProjects",
      "getAllDevProjects(address):(uint256[])",
      [ethereum.Value.fromAddress(dev)],
    );

    return result[0].toBigIntArray();
  }

  try_getAllDevProjects(dev: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllDevProjects",
      "getAllDevProjects(address):(uint256[])",
      [ethereum.Value.fromAddress(dev)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getBondingCurveForToken(token: Address): Address {
    let result = super.call(
      "getBondingCurveForToken",
      "getBondingCurveForToken(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toAddress();
  }

  try_getBondingCurveForToken(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBondingCurveForToken",
      "getBondingCurveForToken(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBondingCurveMasterCopy(): Address {
    let result = super.call(
      "getBondingCurveMasterCopy",
      "getBondingCurveMasterCopy():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getBondingCurveMasterCopy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBondingCurveMasterCopy",
      "getBondingCurveMasterCopy():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFeeRecipient(): Address {
    let result = super.call(
      "getFeeRecipient",
      "getFeeRecipient():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getFeeRecipient",
      "getFeeRecipient():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHigherPumpGenerator(): Address {
    let result = super.call(
      "getHigherPumpGenerator",
      "getHigherPumpGenerator():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getHigherPumpGenerator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getHigherPumpGenerator",
      "getHigherPumpGenerator():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getHigherPumpTokenMasterCopy(): Address {
    let result = super.call(
      "getHigherPumpTokenMasterCopy",
      "getHigherPumpTokenMasterCopy():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getHigherPumpTokenMasterCopy(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getHigherPumpTokenMasterCopy",
      "getHigherPumpTokenMasterCopy():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLatestDevProject(dev: Address): BigInt {
    let result = super.call(
      "getLatestDevProject",
      "getLatestDevProject(address):(uint256)",
      [ethereum.Value.fromAddress(dev)],
    );

    return result[0].toBigInt();
  }

  try_getLatestDevProject(dev: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestDevProject",
      "getLatestDevProject(address):(uint256)",
      [ethereum.Value.fromAddress(dev)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLaunchTime(token: Address): BigInt {
    let result = super.call(
      "getLaunchTime",
      "getLaunchTime(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBigInt();
  }

  try_getLaunchTime(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLaunchTime",
      "getLaunchTime(address):(uint256)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiquidityLocker(): Address {
    let result = super.call(
      "getLiquidityLocker",
      "getLiquidityLocker():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getLiquidityLocker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLiquidityLocker",
      "getLiquidityLocker():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNumDevProjects(dev: Address): BigInt {
    let result = super.call(
      "getNumDevProjects",
      "getNumDevProjects(address):(uint256)",
      [ethereum.Value.fromAddress(dev)],
    );

    return result[0].toBigInt();
  }

  try_getNumDevProjects(dev: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumDevProjects",
      "getNumDevProjects(address):(uint256)",
      [ethereum.Value.fromAddress(dev)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwner(): Address {
    let result = super.call("getOwner", "getOwner():(address)", []);

    return result[0].toAddress();
  }

  try_getOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwner", "getOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProjectCreatorRewardsAddress(token: Address): Address {
    let result = super.call(
      "getProjectCreatorRewardsAddress",
      "getProjectCreatorRewardsAddress(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toAddress();
  }

  try_getProjectCreatorRewardsAddress(
    token: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProjectCreatorRewardsAddress",
      "getProjectCreatorRewardsAddress(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProjectDev(token: Address): Address {
    let result = super.call(
      "getProjectDev",
      "getProjectDev(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toAddress();
  }

  try_getProjectDev(token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProjectDev",
      "getProjectDev(address):(address)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProjectIDsByTokens(tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getProjectIDsByTokens",
      "getProjectIDsByTokens(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens)],
    );

    return result[0].toBigIntArray();
  }

  try_getProjectIDsByTokens(
    tokens: Array<Address>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getProjectIDsByTokens",
      "getProjectIDsByTokens(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getProjectInfoByToken(token: Address): Database__getProjectInfoByTokenResult {
    let result = super.call(
      "getProjectInfoByToken",
      "getProjectInfoByToken(address):(address,address,string[],address)",
      [ethereum.Value.fromAddress(token)],
    );

    return new Database__getProjectInfoByTokenResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toStringArray(),
      result[3].toAddress(),
    );
  }

  try_getProjectInfoByToken(
    token: Address,
  ): ethereum.CallResult<Database__getProjectInfoByTokenResult> {
    let result = super.tryCall(
      "getProjectInfoByToken",
      "getProjectInfoByToken(address):(address,address,string[],address)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Database__getProjectInfoByTokenResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toStringArray(),
        value[3].toAddress(),
      ),
    );
  }

  getProjectMetadata(token: Address): Array<string> {
    let result = super.call(
      "getProjectMetadata",
      "getProjectMetadata(address):(string[])",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toStringArray();
  }

  try_getProjectMetadata(token: Address): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getProjectMetadata",
      "getProjectMetadata(address):(string[])",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  isBonded(token: Address): boolean {
    let result = super.call("isBonded", "isBonded(address):(bool)", [
      ethereum.Value.fromAddress(token),
    ]);

    return result[0].toBoolean();
  }

  try_isBonded(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBonded", "isBonded(address):(bool)", [
      ethereum.Value.fromAddress(token),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBondedByID(projectID: BigInt): boolean {
    let result = super.call("isBondedByID", "isBondedByID(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(projectID),
    ]);

    return result[0].toBoolean();
  }

  try_isBondedByID(projectID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBondedByID", "isBondedByID(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(projectID),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCurveOrAdder(addr: Address): boolean {
    let result = super.call(
      "isCurveOrAdder",
      "isCurveOrAdder(address):(bool)",
      [ethereum.Value.fromAddress(addr)],
    );

    return result[0].toBoolean();
  }

  try_isCurveOrAdder(addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCurveOrAdder",
      "isCurveOrAdder(address):(bool)",
      [ethereum.Value.fromAddress(addr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isHigherPumpToken(token: Address): boolean {
    let result = super.call(
      "isHigherPumpToken",
      "isHigherPumpToken(address):(bool)",
      [ethereum.Value.fromAddress(token)],
    );

    return result[0].toBoolean();
  }

  try_isHigherPumpToken(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isHigherPumpToken",
      "isHigherPumpToken(address):(bool)",
      [ethereum.Value.fromAddress(token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  launchFee(): BigInt {
    let result = super.call("launchFee", "launchFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_launchFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("launchFee", "launchFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidityAdder(): Address {
    let result = super.call("liquidityAdder", "liquidityAdder():(address)", []);

    return result[0].toAddress();
  }

  try_liquidityAdder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityAdder",
      "liquidityAdder():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  liquidityPermaLocker(): Address {
    let result = super.call(
      "liquidityPermaLocker",
      "liquidityPermaLocker():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_liquidityPermaLocker(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "liquidityPermaLocker",
      "liquidityPermaLocker():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  numBondedProjects(): BigInt {
    let result = super.call(
      "numBondedProjects",
      "numBondedProjects():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_numBondedProjects(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numBondedProjects",
      "numBondedProjects():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numPrebondedProjects(): BigInt {
    let result = super.call(
      "numPrebondedProjects",
      "numPrebondedProjects():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_numPrebondedProjects(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numPrebondedProjects",
      "numPrebondedProjects():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paginateBondedProjectIDs(
    startIndex: BigInt,
    endIndex: BigInt,
  ): Array<BigInt> {
    let result = super.call(
      "paginateBondedProjectIDs",
      "paginateBondedProjectIDs(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_paginateBondedProjectIDs(
    startIndex: BigInt,
    endIndex: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "paginateBondedProjectIDs",
      "paginateBondedProjectIDs(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  paginatePrebondedProjectIDs(
    startIndex: BigInt,
    endIndex: BigInt,
  ): Array<BigInt> {
    let result = super.call(
      "paginatePrebondedProjectIDs",
      "paginatePrebondedProjectIDs(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_paginatePrebondedProjectIDs(
    startIndex: BigInt,
    endIndex: BigInt,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "paginatePrebondedProjectIDs",
      "paginatePrebondedProjectIDs(uint256,uint256):(uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  paginatePrebondedProjects(
    startIndex: BigInt,
    endIndex: BigInt,
  ): Database__paginatePrebondedProjectsResult {
    let result = super.call(
      "paginatePrebondedProjects",
      "paginatePrebondedProjects(uint256,uint256):(address[],address[],string[][],address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );

    return new Database__paginatePrebondedProjectsResult(
      result[0].toAddressArray(),
      result[1].toAddressArray(),
      result[2].toStringMatrix(),
      result[3].toAddressArray(),
    );
  }

  try_paginatePrebondedProjects(
    startIndex: BigInt,
    endIndex: BigInt,
  ): ethereum.CallResult<Database__paginatePrebondedProjectsResult> {
    let result = super.tryCall(
      "paginatePrebondedProjects",
      "paginatePrebondedProjects(uint256,uint256):(address[],address[],string[][],address[])",
      [
        ethereum.Value.fromUnsignedBigInt(startIndex),
        ethereum.Value.fromUnsignedBigInt(endIndex),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Database__paginatePrebondedProjectsResult(
        value[0].toAddressArray(),
        value[1].toAddressArray(),
        value[2].toStringMatrix(),
        value[3].toAddressArray(),
      ),
    );
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  projectNonce(): BigInt {
    let result = super.call("projectNonce", "projectNonce():(uint256)", []);

    return result[0].toBigInt();
  }

  try_projectNonce(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("projectNonce", "projectNonce():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projects(param0: BigInt): Database__projectsResult {
    let result = super.call(
      "projects",
      "projects(uint256):(address,address,string,string,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Database__projectsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
    );
  }

  try_projects(param0: BigInt): ethereum.CallResult<Database__projectsResult> {
    let result = super.tryCall(
      "projects",
      "projects(uint256):(address,address,string,string,address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Database__projectsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDevFeeCall extends ethereum.Call {
  get inputs(): AddDevFeeCall__Inputs {
    return new AddDevFeeCall__Inputs(this);
  }

  get outputs(): AddDevFeeCall__Outputs {
    return new AddDevFeeCall__Outputs(this);
  }
}

export class AddDevFeeCall__Inputs {
  _call: AddDevFeeCall;

  constructor(call: AddDevFeeCall) {
    this._call = call;
  }

  get dev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddDevFeeCall__Outputs {
  _call: AddDevFeeCall;

  constructor(call: AddDevFeeCall) {
    this._call = call;
  }
}

export class BondProjectCall extends ethereum.Call {
  get inputs(): BondProjectCall__Inputs {
    return new BondProjectCall__Inputs(this);
  }

  get outputs(): BondProjectCall__Outputs {
    return new BondProjectCall__Outputs(this);
  }
}

export class BondProjectCall__Inputs {
  _call: BondProjectCall;

  constructor(call: BondProjectCall) {
    this._call = call;
  }
}

export class BondProjectCall__Outputs {
  _call: BondProjectCall;

  constructor(call: BondProjectCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class ClaimDevFeeCall extends ethereum.Call {
  get inputs(): ClaimDevFeeCall__Inputs {
    return new ClaimDevFeeCall__Inputs(this);
  }

  get outputs(): ClaimDevFeeCall__Outputs {
    return new ClaimDevFeeCall__Outputs(this);
  }
}

export class ClaimDevFeeCall__Inputs {
  _call: ClaimDevFeeCall;

  constructor(call: ClaimDevFeeCall) {
    this._call = call;
  }

  get dev(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimDevFeeCall__Outputs {
  _call: ClaimDevFeeCall;

  constructor(call: ClaimDevFeeCall) {
    this._call = call;
  }
}

export class LaunchProjectCall extends ethereum.Call {
  get inputs(): LaunchProjectCall__Inputs {
    return new LaunchProjectCall__Inputs(this);
  }

  get outputs(): LaunchProjectCall__Outputs {
    return new LaunchProjectCall__Outputs(this);
  }
}

export class LaunchProjectCall__Inputs {
  _call: LaunchProjectCall;

  constructor(call: LaunchProjectCall) {
    this._call = call;
  }

  get metadata(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get tokenPayload(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get bondingCurvePayload(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get name(): string {
    return this._call.inputValues[3].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class LaunchProjectCall__Outputs {
  _call: LaunchProjectCall;

  constructor(call: LaunchProjectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterVolumeCall extends ethereum.Call {
  get inputs(): RegisterVolumeCall__Inputs {
    return new RegisterVolumeCall__Inputs(this);
  }

  get outputs(): RegisterVolumeCall__Outputs {
    return new RegisterVolumeCall__Outputs(this);
  }
}

export class RegisterVolumeCall__Inputs {
  _call: RegisterVolumeCall;

  constructor(call: RegisterVolumeCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RegisterVolumeCall__Outputs {
  _call: RegisterVolumeCall;

  constructor(call: RegisterVolumeCall) {
    this._call = call;
  }
}

export class SetCanRegisterVolumeCall extends ethereum.Call {
  get inputs(): SetCanRegisterVolumeCall__Inputs {
    return new SetCanRegisterVolumeCall__Inputs(this);
  }

  get outputs(): SetCanRegisterVolumeCall__Outputs {
    return new SetCanRegisterVolumeCall__Outputs(this);
  }
}

export class SetCanRegisterVolumeCall__Inputs {
  _call: SetCanRegisterVolumeCall;

  constructor(call: SetCanRegisterVolumeCall) {
    this._call = call;
  }

  get _canRegisterVolume(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCanRegisterVolumeCall__Outputs {
  _call: SetCanRegisterVolumeCall;

  constructor(call: SetCanRegisterVolumeCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetHigherPumpBondingCurveMasterCopyCall extends ethereum.Call {
  get inputs(): SetHigherPumpBondingCurveMasterCopyCall__Inputs {
    return new SetHigherPumpBondingCurveMasterCopyCall__Inputs(this);
  }

  get outputs(): SetHigherPumpBondingCurveMasterCopyCall__Outputs {
    return new SetHigherPumpBondingCurveMasterCopyCall__Outputs(this);
  }
}

export class SetHigherPumpBondingCurveMasterCopyCall__Inputs {
  _call: SetHigherPumpBondingCurveMasterCopyCall;

  constructor(call: SetHigherPumpBondingCurveMasterCopyCall) {
    this._call = call;
  }

  get _HigherPumpBondingCurveMasterCopy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHigherPumpBondingCurveMasterCopyCall__Outputs {
  _call: SetHigherPumpBondingCurveMasterCopyCall;

  constructor(call: SetHigherPumpBondingCurveMasterCopyCall) {
    this._call = call;
  }
}

export class SetHigherPumpGeneratorCall extends ethereum.Call {
  get inputs(): SetHigherPumpGeneratorCall__Inputs {
    return new SetHigherPumpGeneratorCall__Inputs(this);
  }

  get outputs(): SetHigherPumpGeneratorCall__Outputs {
    return new SetHigherPumpGeneratorCall__Outputs(this);
  }
}

export class SetHigherPumpGeneratorCall__Inputs {
  _call: SetHigherPumpGeneratorCall;

  constructor(call: SetHigherPumpGeneratorCall) {
    this._call = call;
  }

  get _HigherPumpGenerator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHigherPumpGeneratorCall__Outputs {
  _call: SetHigherPumpGeneratorCall;

  constructor(call: SetHigherPumpGeneratorCall) {
    this._call = call;
  }
}

export class SetHigherPumpTokenMasterCopyCall extends ethereum.Call {
  get inputs(): SetHigherPumpTokenMasterCopyCall__Inputs {
    return new SetHigherPumpTokenMasterCopyCall__Inputs(this);
  }

  get outputs(): SetHigherPumpTokenMasterCopyCall__Outputs {
    return new SetHigherPumpTokenMasterCopyCall__Outputs(this);
  }
}

export class SetHigherPumpTokenMasterCopyCall__Inputs {
  _call: SetHigherPumpTokenMasterCopyCall;

  constructor(call: SetHigherPumpTokenMasterCopyCall) {
    this._call = call;
  }

  get _HigherPumpTokenMasterCopy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHigherPumpTokenMasterCopyCall__Outputs {
  _call: SetHigherPumpTokenMasterCopyCall;

  constructor(call: SetHigherPumpTokenMasterCopyCall) {
    this._call = call;
  }
}

export class SetHigherVolumeTrackerCall extends ethereum.Call {
  get inputs(): SetHigherVolumeTrackerCall__Inputs {
    return new SetHigherVolumeTrackerCall__Inputs(this);
  }

  get outputs(): SetHigherVolumeTrackerCall__Outputs {
    return new SetHigherVolumeTrackerCall__Outputs(this);
  }
}

export class SetHigherVolumeTrackerCall__Inputs {
  _call: SetHigherVolumeTrackerCall;

  constructor(call: SetHigherVolumeTrackerCall) {
    this._call = call;
  }

  get _HigherVolumeTracker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetHigherVolumeTrackerCall__Outputs {
  _call: SetHigherVolumeTrackerCall;

  constructor(call: SetHigherVolumeTrackerCall) {
    this._call = call;
  }
}

export class SetLaunchFeeCall extends ethereum.Call {
  get inputs(): SetLaunchFeeCall__Inputs {
    return new SetLaunchFeeCall__Inputs(this);
  }

  get outputs(): SetLaunchFeeCall__Outputs {
    return new SetLaunchFeeCall__Outputs(this);
  }
}

export class SetLaunchFeeCall__Inputs {
  _call: SetLaunchFeeCall;

  constructor(call: SetLaunchFeeCall) {
    this._call = call;
  }

  get _launchFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLaunchFeeCall__Outputs {
  _call: SetLaunchFeeCall;

  constructor(call: SetLaunchFeeCall) {
    this._call = call;
  }
}

export class SetLiquidityAdderCall extends ethereum.Call {
  get inputs(): SetLiquidityAdderCall__Inputs {
    return new SetLiquidityAdderCall__Inputs(this);
  }

  get outputs(): SetLiquidityAdderCall__Outputs {
    return new SetLiquidityAdderCall__Outputs(this);
  }
}

export class SetLiquidityAdderCall__Inputs {
  _call: SetLiquidityAdderCall;

  constructor(call: SetLiquidityAdderCall) {
    this._call = call;
  }

  get _liquidityAdder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLiquidityAdderCall__Outputs {
  _call: SetLiquidityAdderCall;

  constructor(call: SetLiquidityAdderCall) {
    this._call = call;
  }
}

export class SetPausedCall extends ethereum.Call {
  get inputs(): SetPausedCall__Inputs {
    return new SetPausedCall__Inputs(this);
  }

  get outputs(): SetPausedCall__Outputs {
    return new SetPausedCall__Outputs(this);
  }
}

export class SetPausedCall__Inputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }

  get _paused(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedCall__Outputs {
  _call: SetPausedCall;

  constructor(call: SetPausedCall) {
    this._call = call;
  }
}

export class SetProjectCreatorRewardsAddressCall extends ethereum.Call {
  get inputs(): SetProjectCreatorRewardsAddressCall__Inputs {
    return new SetProjectCreatorRewardsAddressCall__Inputs(this);
  }

  get outputs(): SetProjectCreatorRewardsAddressCall__Outputs {
    return new SetProjectCreatorRewardsAddressCall__Outputs(this);
  }
}

export class SetProjectCreatorRewardsAddressCall__Inputs {
  _call: SetProjectCreatorRewardsAddressCall;

  constructor(call: SetProjectCreatorRewardsAddressCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _projectCreatorRewardsAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetProjectCreatorRewardsAddressCall__Outputs {
  _call: SetProjectCreatorRewardsAddressCall;

  constructor(call: SetProjectCreatorRewardsAddressCall) {
    this._call = call;
  }
}
